{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { desc } from './base.js';\nconst DEV_MODE = true;\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n *     once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first: HTMLDivElement;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector, cache) {\n  return (protoOrTarget, nameOrContext, descriptor) => {\n    const doQuery = el => {\n      // TODO: if we want to allow users to assert that the query will never\n      // return null, we need a new option and to throw here if the result\n      // is null.\n      return el.renderRoot?.querySelector(selector) ?? null;\n    };\n    if (cache) {\n      // Accessors to wrap from either:\n      //   1. The decorator target, in the case of standard decorators\n      //   2. The property descriptor, in the case of experimental decorators\n      //      on auto-accessors.\n      //   3. Functions that access our own cache-key property on the instance,\n      //      in the case of experimental decorators on fields.\n      const {\n        get,\n        set\n      } = typeof nameOrContext === 'object' ? protoOrTarget : descriptor ?? (() => {\n        const key = DEV_MODE ? Symbol(`${String(nameOrContext)} (@query() cache)`) : Symbol();\n        return {\n          get() {\n            return this[key];\n          },\n          set(v) {\n            this[key] = v;\n          }\n        };\n      })();\n      return desc(protoOrTarget, nameOrContext, {\n        get() {\n          if (cache) {\n            let result = get.call(this);\n            if (result === undefined) {\n              result = doQuery(this);\n              set.call(this, result);\n            }\n            return result;\n          }\n          return doQuery(this);\n        }\n      });\n    } else {\n      // This object works as the return type for both standard and\n      // experimental decorators.\n      return desc(protoOrTarget, nameOrContext, {\n        get() {\n          return doQuery(this);\n        }\n      });\n    }\n  };\n}","map":{"version":3,"names":["desc","DEV_MODE","query","selector","cache","protoOrTarget","nameOrContext","descriptor","doQuery","el","renderRoot","querySelector","get","set","key","Symbol","String","v","result","call","undefined"],"sources":["/home/KonnorRogers/shoelace-angular/node_modules/@lit/reactive-element/development/decorators/query.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { desc } from './base.js';\nconst DEV_MODE = true;\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n *     once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first: HTMLDivElement;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector, cache) {\n    return ((protoOrTarget, nameOrContext, descriptor) => {\n        const doQuery = (el) => {\n            // TODO: if we want to allow users to assert that the query will never\n            // return null, we need a new option and to throw here if the result\n            // is null.\n            return (el.renderRoot?.querySelector(selector) ?? null);\n        };\n        if (cache) {\n            // Accessors to wrap from either:\n            //   1. The decorator target, in the case of standard decorators\n            //   2. The property descriptor, in the case of experimental decorators\n            //      on auto-accessors.\n            //   3. Functions that access our own cache-key property on the instance,\n            //      in the case of experimental decorators on fields.\n            const { get, set } = typeof nameOrContext === 'object'\n                ? protoOrTarget\n                : descriptor ??\n                    (() => {\n                        const key = DEV_MODE\n                            ? Symbol(`${String(nameOrContext)} (@query() cache)`)\n                            : Symbol();\n                        return {\n                            get() {\n                                return this[key];\n                            },\n                            set(v) {\n                                this[key] = v;\n                            },\n                        };\n                    })();\n            return desc(protoOrTarget, nameOrContext, {\n                get() {\n                    if (cache) {\n                        let result = get.call(this);\n                        if (result === undefined) {\n                            result = doQuery(this);\n                            set.call(this, result);\n                        }\n                        return result;\n                    }\n                    return doQuery(this);\n                },\n            });\n        }\n        else {\n            // This object works as the return type for both standard and\n            // experimental decorators.\n            return desc(protoOrTarget, nameOrContext, {\n                get() {\n                    return doQuery(this);\n                },\n            });\n        }\n    });\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAI,QAAQ,WAAW;AAChC,MAAMC,QAAQ,GAAG,IAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,KAAKA,CAACC,QAAQ,EAAEC,KAAK,EAAE;EACnC,OAAQ,CAACC,aAAa,EAAEC,aAAa,EAAEC,UAAU,KAAK;IAClD,MAAMC,OAAO,GAAIC,EAAE,IAAK;MACpB;MACA;MACA;MACA,OAAQA,EAAE,CAACC,UAAU,EAAEC,aAAa,CAACR,QAAQ,CAAC,IAAI,IAAI;IAC1D,CAAC;IACD,IAAIC,KAAK,EAAE;MACP;MACA;MACA;MACA;MACA;MACA;MACA,MAAM;QAAEQ,GAAG;QAAEC;MAAI,CAAC,GAAG,OAAOP,aAAa,KAAK,QAAQ,GAChDD,aAAa,GACbE,UAAU,IACR,CAAC,MAAM;QACH,MAAMO,GAAG,GAAGb,QAAQ,GACdc,MAAM,CAAE,GAAEC,MAAM,CAACV,aAAa,CAAE,mBAAkB,CAAC,GACnDS,MAAM,CAAC,CAAC;QACd,OAAO;UACHH,GAAGA,CAAA,EAAG;YACF,OAAO,IAAI,CAACE,GAAG,CAAC;UACpB,CAAC;UACDD,GAAGA,CAACI,CAAC,EAAE;YACH,IAAI,CAACH,GAAG,CAAC,GAAGG,CAAC;UACjB;QACJ,CAAC;MACL,CAAC,EAAE,CAAC;MACZ,OAAOjB,IAAI,CAACK,aAAa,EAAEC,aAAa,EAAE;QACtCM,GAAGA,CAAA,EAAG;UACF,IAAIR,KAAK,EAAE;YACP,IAAIc,MAAM,GAAGN,GAAG,CAACO,IAAI,CAAC,IAAI,CAAC;YAC3B,IAAID,MAAM,KAAKE,SAAS,EAAE;cACtBF,MAAM,GAAGV,OAAO,CAAC,IAAI,CAAC;cACtBK,GAAG,CAACM,IAAI,CAAC,IAAI,EAAED,MAAM,CAAC;YAC1B;YACA,OAAOA,MAAM;UACjB;UACA,OAAOV,OAAO,CAAC,IAAI,CAAC;QACxB;MACJ,CAAC,CAAC;IACN,CAAC,MACI;MACD;MACA;MACA,OAAOR,IAAI,CAACK,aAAa,EAAEC,aAAa,EAAE;QACtCM,GAAGA,CAAA,EAAG;UACF,OAAOJ,OAAO,CAAC,IAAI,CAAC;QACxB;MACJ,CAAC,CAAC;IACN;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}