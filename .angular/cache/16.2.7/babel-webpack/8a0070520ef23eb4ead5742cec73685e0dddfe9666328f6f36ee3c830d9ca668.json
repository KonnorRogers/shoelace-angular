{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nconst important = 'important';\n// The leading space is important\nconst importantFlag = ' !' + important;\n// How many characters to remove from a value, as a negative number\nconst flagTrim = 0 - importantFlag.length;\nclass StyleMapDirective extends Directive {\n  constructor(partInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.ATTRIBUTE || partInfo.name !== 'style' || partInfo.strings?.length > 2) {\n      throw new Error('The `styleMap` directive must be used in the `style` attribute ' + 'and must be the only part in the attribute.');\n    }\n  }\n  render(styleInfo) {\n    return Object.keys(styleInfo).reduce((style, prop) => {\n      const value = styleInfo[prop];\n      if (value == null) {\n        return style;\n      }\n      // Convert property names from camel-case to dash-case, i.e.:\n      //  `backgroundColor` -> `background-color`\n      // Vendor-prefixed names need an extra `-` appended to front:\n      //  `webkitAppearance` -> `-webkit-appearance`\n      // Exception is any property name containing a dash, including\n      // custom properties; we assume these are already dash-cased i.e.:\n      //  `--my-button-color` --> `--my-button-color`\n      prop = prop.includes('-') ? prop : prop.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&').toLowerCase();\n      return style + `${prop}:${value};`;\n    }, '');\n  }\n  update(part, [styleInfo]) {\n    const {\n      style\n    } = part.element;\n    if (this._previousStyleProperties === undefined) {\n      this._previousStyleProperties = new Set(Object.keys(styleInfo));\n      return this.render(styleInfo);\n    }\n    // Remove old properties that no longer exist in styleInfo\n    for (const name of this._previousStyleProperties) {\n      // If the name isn't in styleInfo or it's null/undefined\n      if (styleInfo[name] == null) {\n        this._previousStyleProperties.delete(name);\n        if (name.includes('-')) {\n          style.removeProperty(name);\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          style[name] = null;\n        }\n      }\n    }\n    // Add or update properties\n    for (const name in styleInfo) {\n      const value = styleInfo[name];\n      if (value != null) {\n        this._previousStyleProperties.add(name);\n        const isImportant = typeof value === 'string' && value.endsWith(importantFlag);\n        if (name.includes('-') || isImportant) {\n          style.setProperty(name, isImportant ? value.slice(0, flagTrim) : value, isImportant ? important : '');\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          style[name] = value;\n        }\n      }\n    }\n    return noChange;\n  }\n}\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the\n * {@link StyleInfo styleInfo} object and adds the properties to the inline\n * style of the element.\n *\n * Property names with dashes (`-`) are assumed to be valid CSS\n * property names and set on the element's style object using `setProperty()`.\n * Names without dashes are assumed to be camelCased JavaScript property names\n * and set on the element's style object using property assignment, allowing the\n * style object to translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo\n * @see {@link https://lit.dev/docs/templates/directives/#stylemap styleMap code samples on Lit.dev}\n */\nexport const styleMap = directive(StyleMapDirective);","map":{"version":3,"names":["noChange","directive","Directive","PartType","important","importantFlag","flagTrim","length","StyleMapDirective","constructor","partInfo","type","ATTRIBUTE","name","strings","Error","render","styleInfo","Object","keys","reduce","style","prop","value","includes","replace","toLowerCase","update","part","element","_previousStyleProperties","undefined","Set","delete","removeProperty","add","isImportant","endsWith","setProperty","slice","styleMap"],"sources":["/home/KonnorRogers/shoelace-angular/node_modules/lit-html/development/directives/style-map.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange } from '../lit-html.js';\nimport { directive, Directive, PartType, } from '../directive.js';\nconst important = 'important';\n// The leading space is important\nconst importantFlag = ' !' + important;\n// How many characters to remove from a value, as a negative number\nconst flagTrim = 0 - importantFlag.length;\nclass StyleMapDirective extends Directive {\n    constructor(partInfo) {\n        super(partInfo);\n        if (partInfo.type !== PartType.ATTRIBUTE ||\n            partInfo.name !== 'style' ||\n            partInfo.strings?.length > 2) {\n            throw new Error('The `styleMap` directive must be used in the `style` attribute ' +\n                'and must be the only part in the attribute.');\n        }\n    }\n    render(styleInfo) {\n        return Object.keys(styleInfo).reduce((style, prop) => {\n            const value = styleInfo[prop];\n            if (value == null) {\n                return style;\n            }\n            // Convert property names from camel-case to dash-case, i.e.:\n            //  `backgroundColor` -> `background-color`\n            // Vendor-prefixed names need an extra `-` appended to front:\n            //  `webkitAppearance` -> `-webkit-appearance`\n            // Exception is any property name containing a dash, including\n            // custom properties; we assume these are already dash-cased i.e.:\n            //  `--my-button-color` --> `--my-button-color`\n            prop = prop.includes('-')\n                ? prop\n                : prop\n                    .replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&')\n                    .toLowerCase();\n            return style + `${prop}:${value};`;\n        }, '');\n    }\n    update(part, [styleInfo]) {\n        const { style } = part.element;\n        if (this._previousStyleProperties === undefined) {\n            this._previousStyleProperties = new Set(Object.keys(styleInfo));\n            return this.render(styleInfo);\n        }\n        // Remove old properties that no longer exist in styleInfo\n        for (const name of this._previousStyleProperties) {\n            // If the name isn't in styleInfo or it's null/undefined\n            if (styleInfo[name] == null) {\n                this._previousStyleProperties.delete(name);\n                if (name.includes('-')) {\n                    style.removeProperty(name);\n                }\n                else {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    style[name] = null;\n                }\n            }\n        }\n        // Add or update properties\n        for (const name in styleInfo) {\n            const value = styleInfo[name];\n            if (value != null) {\n                this._previousStyleProperties.add(name);\n                const isImportant = typeof value === 'string' && value.endsWith(importantFlag);\n                if (name.includes('-') || isImportant) {\n                    style.setProperty(name, isImportant\n                        ? value.slice(0, flagTrim)\n                        : value, isImportant ? important : '');\n                }\n                else {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    style[name] = value;\n                }\n            }\n        }\n        return noChange;\n    }\n}\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the\n * {@link StyleInfo styleInfo} object and adds the properties to the inline\n * style of the element.\n *\n * Property names with dashes (`-`) are assumed to be valid CSS\n * property names and set on the element's style object using `setProperty()`.\n * Names without dashes are assumed to be camelCased JavaScript property names\n * and set on the element's style object using property assignment, allowing the\n * style object to translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo\n * @see {@link https://lit.dev/docs/templates/directives/#stylemap styleMap code samples on Lit.dev}\n */\nexport const styleMap = directive(StyleMapDirective);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}