{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { _$LH } from './lit-html.js';\nconst {\n  _ChildPart: ChildPart\n} = _$LH;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst wrap = ENABLE_SHADYDOM_NOPATCH && window.ShadyDOM?.inUse && window.ShadyDOM?.noPatch === true ? window.ShadyDOM.wrap : node => node;\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = value => value === null || typeof value != 'object' && typeof value != 'function';\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2\n};\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult = (value, type) => type === undefined ?\n// This property needs to remain unminified.\nvalue?.['_$litType$'] !== undefined : value?.['_$litType$'] === type;\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = value => {\n  return value?.['_$litType$']?.h != null;\n};\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = value =>\n// This property needs to remain unminified.\nvalue?.['_$litDirective$'] !== undefined;\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = value =>\n// This property needs to remain unminified.\nvalue?.['_$litDirective$'];\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = part => part.strings === undefined;\nconst createMarker = () => document.createComment('');\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (containerPart, refPart, part) => {\n  const container = wrap(containerPart._$startNode).parentNode;\n  const refNode = refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(startNode, endNode, containerPart, containerPart.options);\n  } else {\n    const endNode = wrap(part._$endNode).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (part._$notifyConnectionChanged !== undefined && (newConnectionState = containerPart._$isConnected) !== oldParent._$isConnected) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start = part._$startNode;\n      while (start !== endNode) {\n        const n = wrap(start).nextSibling;\n        wrap(container).insertBefore(start, refNode);\n        start = n;\n      }\n    }\n  }\n  return part;\n};\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = (part, value, directiveParent = part) => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part, value = RESET_VALUE) => part._$committedValue = value;\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = part => part._$committedValue;\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = part => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start = part._$startNode;\n  const end = wrap(part._$endNode).nextSibling;\n  while (start !== end) {\n    const n = wrap(start).nextSibling;\n    wrap(start).remove();\n    start = n;\n  }\n};\nexport const clearPart = part => {\n  part._$clear();\n};","map":{"version":3,"names":["_$LH","_ChildPart","ChildPart","ENABLE_SHADYDOM_NOPATCH","wrap","window","ShadyDOM","inUse","noPatch","node","isPrimitive","value","TemplateResultType","HTML","SVG","isTemplateResult","type","undefined","isCompiledTemplateResult","h","isDirectiveResult","getDirectiveClass","isSingleExpression","part","strings","createMarker","document","createComment","insertPart","containerPart","refPart","container","_$startNode","parentNode","refNode","_$endNode","startNode","insertBefore","endNode","options","nextSibling","oldParent","_$parent","parentChanged","_$reparentDisconnectables","newConnectionState","_$notifyConnectionChanged","_$isConnected","start","n","setChildPartValue","directiveParent","_$setValue","RESET_VALUE","setCommittedValue","_$committedValue","getCommittedValue","removePart","end","remove","clearPart","_$clear"],"sources":["/home/KonnorRogers/shoelace-angular/node_modules/lit-html/development/directive-helpers.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { _$LH, } from './lit-html.js';\nconst { _ChildPart: ChildPart } = _$LH;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst wrap = ENABLE_SHADYDOM_NOPATCH &&\n    window.ShadyDOM?.inUse &&\n    window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM.wrap\n    : (node) => node;\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value) => value === null || (typeof value != 'object' && typeof value != 'function');\nexport const TemplateResultType = {\n    HTML: 1,\n    SVG: 2,\n};\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult = (value, type) => type === undefined\n    ? // This property needs to remain unminified.\n        value?.['_$litType$'] !== undefined\n    : value?.['_$litType$'] === type;\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (value) => {\n    return value?.['_$litType$']?.h != null;\n};\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value) => \n// This property needs to remain unminified.\nvalue?.['_$litDirective$'] !== undefined;\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value) => \n// This property needs to remain unminified.\nvalue?.['_$litDirective$'];\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part) => part.strings === undefined;\nconst createMarker = () => document.createComment('');\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (containerPart, refPart, part) => {\n    const container = wrap(containerPart._$startNode).parentNode;\n    const refNode = refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n    if (part === undefined) {\n        const startNode = wrap(container).insertBefore(createMarker(), refNode);\n        const endNode = wrap(container).insertBefore(createMarker(), refNode);\n        part = new ChildPart(startNode, endNode, containerPart, containerPart.options);\n    }\n    else {\n        const endNode = wrap(part._$endNode).nextSibling;\n        const oldParent = part._$parent;\n        const parentChanged = oldParent !== containerPart;\n        if (parentChanged) {\n            part._$reparentDisconnectables?.(containerPart);\n            // Note that although `_$reparentDisconnectables` updates the part's\n            // `_$parent` reference after unlinking from its current parent, that\n            // method only exists if Disconnectables are present, so we need to\n            // unconditionally set it here\n            part._$parent = containerPart;\n            // Since the _$isConnected getter is somewhat costly, only\n            // read it once we know the subtree has directives that need\n            // to be notified\n            let newConnectionState;\n            if (part._$notifyConnectionChanged !== undefined &&\n                (newConnectionState = containerPart._$isConnected) !==\n                    oldParent._$isConnected) {\n                part._$notifyConnectionChanged(newConnectionState);\n            }\n        }\n        if (endNode !== refNode || parentChanged) {\n            let start = part._$startNode;\n            while (start !== endNode) {\n                const n = wrap(start).nextSibling;\n                wrap(container).insertBefore(start, refNode);\n                start = n;\n            }\n        }\n    }\n    return part;\n};\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = (part, value, directiveParent = part) => {\n    part._$setValue(value, directiveParent);\n    return part;\n};\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part, value = RESET_VALUE) => (part._$committedValue = value);\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part) => part._$committedValue;\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part) => {\n    part._$notifyConnectionChanged?.(false, true);\n    let start = part._$startNode;\n    const end = wrap(part._$endNode).nextSibling;\n    while (start !== end) {\n        const n = wrap(start).nextSibling;\n        wrap(start).remove();\n        start = n;\n    }\n};\nexport const clearPart = (part) => {\n    part._$clear();\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}